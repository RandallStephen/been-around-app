{"version":3,"sources":["components/JVectorMapApi.jsx","components/Header.jsx","worldMapDataObject.js","App.jsx","serviceWorker.js","index.js"],"names":["Header","state","react_default","a","createElement","className","Component","worldMapDataObject","BD","BE","BF","BG","BA","BN","BO","JP","BI","BJ","BT","JM","BW","BR","BS","BY","BZ","RU","RW","RS","TL","TM","TJ","RO","GW","GT","GR","GQ","GY","GE","GB","GA","GN","GM","GL","GH","OM","TN","JO","HR","HT","HU","HN","PR","PS","PT","PY","PA","PG","PE","PK","PH","PL","ZM","EH","EE","EG","ZA","EC","IT","VN","SB","ET","SO","ZW","ES","ER","ME","MD","MG","MA","UZ","MM","ML","MN","MK","MW","MR","UG","MY","MX","IL","FR","XS","FI","FJ","FK","NI","NL","NO","NA","VU","NC","NE","NG","NZ","NP","XK","CI","CH","CO","CN","CM","CL","XC","CA","CG","CF","CD","CZ","CY","CR","CU","SZ","SY","KG","KE","SS","SR","KH","SV","SK","KR","SI","KP","KW","SN","SL","KZ","SA","SE","SD","DO","DJ","DK","DE","YE","DZ","US","UY","LB","LA","TW","TT","TR","LK","LV","LT","LU","LR","LS","TH","TF","TG","TD","LY","AE","VE","AF","IQ","IS","IR","AM","AL","AO","AR","AU","AT","IN","TZ","AZ","IE","ID","UA","QA","MZ","countryListObject","countryCodes","Object","keys","countriesDataObject","_i","_countryCodes","length","code","name","been","color","dates","console","log","JVectorMapApi","allData","selectedName","selectedCode","totalVisited","focus","handleClick","e","countryName","countryCode","_this","setState","prevState","objectSpread","handleCheckbox","event","_event$target","target","checked","newState","handleChangeDate","date","dateCode","_this2","this","colors","_","mapObject","countryData","value","refs","map","$mapObject","tip","remove","style","width","height","build","backgroundColor","regionsSelectable","regionsSelectableOne","ref","containerStyle","containerClassName","onRegionClick","series","regions","values","attribute","scale","NotSelectedHasBeen","NotSelectedHasNotBeen","SelectedHasBeen","SelectedHasNotBeen","display","type","id","key","onChange","htmlFor","entry_default","App","Fragment","components_Header","components_JVectorMapApi","React","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae3b018d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { VectorMap } from \"react-jvectormap\";\r\nimport _ from \"underscore\";\r\nimport worldMapDataObject from \"../worldMapDataObject.js\";\r\nimport DateRangePicker from \"@wojtekmaj/react-daterange-picker\";\r\n\r\nconst countryListObject = worldMapDataObject;\r\nconst countryCodes = Object.keys(countryListObject); // convert the country codes into an array\r\nconst countriesDataObject = {};\r\n\r\n// creates Object to access country data by Country Code\r\nfor (var code of countryCodes) {\r\n  countriesDataObject[code] = {\r\n    name: countryListObject[code],\r\n    been: false,\r\n    color: 0,\r\n    dates: [null, null]\r\n  };\r\n}\r\nconsole.log(\"countriesDataObject: \", countriesDataObject);\r\n\r\nclass JVectorMapApi extends Component {\r\n  state = {\r\n    allData: countriesDataObject,\r\n    selectedName: \"\",\r\n    selectedCode: \"\",\r\n    totalVisited: 0,\r\n    focus: null // set this state to the map's scale on click\r\n  };\r\n\r\n  handleClick = (e, code) => {\r\n    const countryName = countryListObject[code];\r\n    const countryCode = code;\r\n    this.setState(prevState => ({\r\n      ...prevState,\r\n      selectedName: countryName,\r\n      selectedCode: countryCode\r\n    }));\r\n  };\r\n\r\n  handleCheckbox = event => {\r\n    const { name, checked } = event.target; // name is the country code\r\n    this.setState(prevState => {\r\n      const newState = {\r\n        ...prevState,\r\n        allData: { ...prevState.allData }\r\n      };\r\n      newState.allData[name].been = checked;\r\n      console.log(newState);\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  handleChangeDate = date => {\r\n    const dateCode = this.state.selectedCode;\r\n    this.setState(prevState => {\r\n      const newState = {\r\n        ...prevState,\r\n        allData: { ...prevState.allData }\r\n      };\r\n      newState.allData[dateCode].dates = date;\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  render() {\r\n    console.log(\"Inside the Render function\", this.state);\r\n\r\n    const colors = _.mapObject(this.state.allData, (countryData, value) => {\r\n      if (this.state.selectedCode === value) {\r\n        return countryData.been ? \"SelectedHasBeen\" : \"SelectedHasNotBeen\";\r\n      }\r\n      return countryData.been ? \"NotSelectedHasBeen\" : \"NotSelectedHasNotBeen\";\r\n    });\r\n    // console.log(JSON.stringify(colors));\r\n\r\n    // stops the lable from \"sticking\" on the screen\r\n    if (this.refs.map) {\r\n      this.refs.map.$mapObject.tip.remove();\r\n    }\r\n\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <div style={{ width: \"100%\", height: 450 }}>\r\n          <VectorMap\r\n            map={\"world_mill\"}\r\n            backgroundColor=\"#3b96ce\"\r\n            regionsSelectable={true}\r\n            regionsSelectableOne={true}\r\n            ref=\"map\"\r\n            containerStyle={{\r\n              width: \"100%\",\r\n              height: \"100%\"\r\n            }}\r\n            containerClassName=\"map\"\r\n            onRegionClick={this.handleClick}\r\n            // onViewportChange={this.handleScale}\r\n            series={{\r\n              regions: [\r\n                {\r\n                  values: colors,\r\n                  attribute: \"fill\",\r\n                  scale: {\r\n                    NotSelectedHasBeen: \"green\",\r\n                    NotSelectedHasNotBeen: \"white\",\r\n                    SelectedHasBeen: \"lightgreen\",\r\n                    SelectedHasNotBeen: \"yellow\"\r\n                  }\r\n                }\r\n              ]\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <div style={{ display: this.state.selectedName ? \"block\" : \"none\" }}>\r\n          <div className=\"card border-secondary m-1 pl-0\">\r\n            <div className=\"card-header\">\r\n              <h3>\r\n                {this.state.selectedName}, {this.state.selectedCode}\r\n              </h3>\r\n            </div>\r\n            <div className=\"card-body text-primary\">\r\n              <form>\r\n                <div className=\"custom-control custom-switch\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    id=\"customSwitch1\"\r\n                    className=\"custom-control-input\"\r\n                    key={this.state.selectedCode}\r\n                    name={this.state.selectedCode}\r\n                    checked={\r\n                      this.state.allData[this.state.selectedCode]\r\n                        ? this.state.allData[this.state.selectedCode].been\r\n                        : false\r\n                    }\r\n                    onChange={this.handleCheckbox}\r\n                  />\r\n                  <label\r\n                    className=\"custom-control-label\"\r\n                    htmlFor=\"customSwitch1\"\r\n                  >\r\n                    I have been here\r\n                  </label>\r\n                </div>\r\n                {this.state.selectedCode &&\r\n                this.state.allData[this.state.selectedCode].been ? (\r\n                  <div className=\"my-1\">\r\n                    <DateRangePicker\r\n                      key={this.state.selectedCode}\r\n                      value={\r\n                        this.state.selectedCode\r\n                          ? this.state.allData[this.state.selectedCode].dates\r\n                          : null\r\n                      }\r\n                      onChange={this.handleChangeDate}\r\n                    />\r\n                  </div>\r\n                ) : null}\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default JVectorMapApi;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Header extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <h1>Been Around Header</h1>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","const worldMapDataObject = {\r\n  BD: \"Bangladesh\",\r\n  BE: \"Belgium\",\r\n  BF: \"Burkina Faso\",\r\n  BG: \"Bulgaria\",\r\n  BA: \"Bosnia and Herzegovina\",\r\n  BN: \"Brunei\",\r\n  BO: \"Bolivia\",\r\n  JP: \"Japan\",\r\n  BI: \"Burundi\",\r\n  BJ: \"Benin\",\r\n  BT: \"Bhutan\",\r\n  JM: \"Jamaica\",\r\n  BW: \"Botswana\",\r\n  BR: \"Brazil\",\r\n  BS: \"Bahamas\",\r\n  BY: \"Belarus\",\r\n  BZ: \"Belize\",\r\n  RU: \"Russia\",\r\n  RW: \"Rwanda\",\r\n  RS: \"Serbia\",\r\n  TL: \"Timor-Leste\",\r\n  TM: \"Turkmenistan\",\r\n  TJ: \"Tajikistan\",\r\n  RO: \"Romania\",\r\n  GW: \"Guinea-Bissau\",\r\n  GT: \"Guatemala\",\r\n  GR: \"Greece\",\r\n  GQ: \"Equatorial Guinea\",\r\n  GY: \"Guyana\",\r\n  GE: \"Georgia\",\r\n  GB: \"United Kingdom\",\r\n  GA: \"Gabon\",\r\n  GN: \"Guinea\",\r\n  GM: \"Gambia\",\r\n  GL: \"Greenland\",\r\n  GH: \"Ghana\",\r\n  OM: \"Oman\",\r\n  TN: \"Tunisia\",\r\n  JO: \"Jordan\",\r\n  HR: \"Croatia\",\r\n  HT: \"Haiti\",\r\n  HU: \"Hungary\",\r\n  HN: \"Honduras\",\r\n  PR: \"Puerto Rico\",\r\n  PS: \"Palestine\",\r\n  PT: \"Portugal\",\r\n  PY: \"Paraguay\",\r\n  PA: \"Panama\",\r\n  PG: \"Papua New Guinea\",\r\n  PE: \"Peru\",\r\n  PK: \"Pakistan\",\r\n  PH: \"Philippines\",\r\n  PL: \"Poland\",\r\n  ZM: \"Zambia\",\r\n  EH: \"Western Sahara\",\r\n  EE: \"Estonia\",\r\n  EG: \"Egypt\",\r\n  ZA: \"South Africa\",\r\n  EC: \"Ecuador\",\r\n  IT: \"Italy\",\r\n  VN: \"Vietnam\",\r\n  SB: \"Solomon Island\",\r\n  ET: \"Ethiopia\",\r\n  SO: \"Somalia\",\r\n  ZW: \"Zimbabwe\",\r\n  ES: \"Spain\",\r\n  ER: \"Eritrea\",\r\n  ME: \"Montenegro\",\r\n  MD: \"Moldova\",\r\n  MG: \"Madagascar\",\r\n  MA: \"Morocco\",\r\n  UZ: \"Uzbekistan\",\r\n  MM: \"Myanmar\",\r\n  ML: \"Mali\",\r\n  MN: \"Mongolia\",\r\n  MK: \"Macedonia\",\r\n  MW: \"Malawi\",\r\n  MR: \"Mauritania\",\r\n  UG: \"Uganda\",\r\n  MY: \"Malaysia\",\r\n  MX: \"Mexico\",\r\n  IL: \"Israel\",\r\n  FR: \"France\",\r\n  XS: \"Somaliland\",\r\n  FI: \"Finland\",\r\n  FJ: \"Fiji\",\r\n  FK: \"Falkland Islands\",\r\n  NI: \"Nicaragua\",\r\n  NL: \"Netherlands\",\r\n  NO: \"Norway\",\r\n  NA: \"Namibia\",\r\n  VU: \"Vanuatu\",\r\n  NC: \"New Caledonia\",\r\n  NE: \"Niger\",\r\n  NG: \"Nigeria\",\r\n  NZ: \"New Zealand\",\r\n  NP: \"Nepal\",\r\n  XK: \"Kosovo\",\r\n  CI: \"Côte d'Ivoire\",\r\n  CH: \"Switzerland\",\r\n  CO: \"Colombia\",\r\n  CN: \"China\",\r\n  CM: \"Cameroon\",\r\n  CL: \"Chile\",\r\n  XC: \"Northern Cyprus\",\r\n  CA: \"Canada\",\r\n  CG: \"Congo\",\r\n  CF: \"Central African Republic\",\r\n  CD: \"Democratic Republic Congo\",\r\n  CZ: \"Czech Republic\",\r\n  CY: \"Cyprus\",\r\n  CR: \"Costa Rica\",\r\n  CU: \"Cuba\",\r\n  SZ: \"Swaziland\",\r\n  SY: \"Syria\",\r\n  KG: \"Kyrgyzstan\",\r\n  KE: \"Kenya\",\r\n  SS: \"South Sudan\",\r\n  SR: \"Suriname\",\r\n  KH: \"Cambodia\",\r\n  SV: \"El Salvador\",\r\n  SK: \"Slovakia\",\r\n  KR: \"Korea\",\r\n  SI: \"Slovenia\",\r\n  KP: \"Democratic Republic Korea\",\r\n  KW: \"Kuwait\",\r\n  SN: \"Senegal\",\r\n  SL: \"Sierra Leone\",\r\n  KZ: \"Kazakhstan\",\r\n  SA: \"Saudi Arabia\",\r\n  SE: \"Sweden\",\r\n  SD: \"Sudan\",\r\n  DO: \"Dominican Republic\",\r\n  DJ: \"Djibouti\",\r\n  DK: \"Denmark\",\r\n  DE: \"Germany\",\r\n  YE: \"Yemen\",\r\n  DZ: \"Algeria\",\r\n  US: \"United States\",\r\n  UY: \"Uruguay\",\r\n  LB: \"Lebanon\",\r\n  LA: \"Lao PDR\",\r\n  TW: \"Taiwan\",\r\n  TT: \"Trinidad and Tobago\",\r\n  TR: \"Turkey\",\r\n  LK: \"Sri Lanka\",\r\n  LV: \"Latvia\",\r\n  LT: \"Lithuania\",\r\n  LU: \"Luxembourg\",\r\n  LR: \"Liberia\",\r\n  LS: \"Lesotho\",\r\n  TH: \"Thailand\",\r\n  TF: \"French Southern Antarctic Lands\",\r\n  TG: \"Togo\",\r\n  TD: \"Chad\",\r\n  LY: \"Libya\",\r\n  AE: \"United Arab Emirates\",\r\n  VE: \"Venezuela\",\r\n  AF: \"Afghanistan\",\r\n  IQ: \"Iraq\",\r\n  IS: \"Iceland\",\r\n  IR: \"Iran\",\r\n  AM: \"Armenia\",\r\n  AL: \"Albania\",\r\n  AO: \"Angola\",\r\n  AR: \"Argentina\",\r\n  AU: \"Australia\",\r\n  AT: \"Austria\",\r\n  IN: \"India\",\r\n  TZ: \"Tanzania\",\r\n  AZ: \"Azerbaijan\",\r\n  IE: \"Ireland\",\r\n  ID: \"Indonesia\",\r\n  UA: \"Ukraine\",\r\n  QA: \"Qatar\",\r\n  MZ: \"Mozambique\"\r\n};\r\nexport default worldMapDataObject;\r\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport JVectorMapApi from \"./components/JVectorMapApi\";\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Header />\n        <JVectorMapApi />\n      </React.Fragment>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}